<div>
    <div class = "row">
        <div class = "col-md-8">
            <textarea id="code-screen">{{content}}</textarea>
        </div>
        <div class="col-md-4" id="chatbox">
            <div class="panel panel-primary">
                <!-- VIDEO CALL -->
                <div id="video-container">
                    <video autoplay id="second-video"></video>
                    <video autoplay id="my-video" muted="true"></video>
                    <div id="step2">
                        <p> Your ID: <span id="my-id">...</span></p>
                        <div class="form-inline">
                            <input type="text" class="form-control" placeholder="Call User ID..." id="callto-id">
                            <a href="#" class="btn btn-sm btn-success" id="make-call">Call</a>
                        </div>
                    </div>
                    <div id="step3">
                        <p> Talk to: <span id="second-id">...</span>
                        <a href="#" class="btn btn-sm btn-danger" id="end-call">End call</a>
                        </p>
                    </div>
                </div>


                <!-- CHAT ROOM -->
                <div class="panel-heading">
                    CHAT ROOM
                    <span class="pull-right" id="chatbox-username">
                        {{#if user}}
                            {{user.name}}
                        {{/if}}
                    </span>
                </div>
                <div class="panel-body">
                    <ul class="media-list" style="height: 165px; overflow-y: scroll" id="chatbox-listMessages">

                    </ul>
                </div>
                <div class="panel-footer">
                    <div class="input-group">
                        <input type="text" class ="form-control" placeholder="Enter Message" id="userMessage"/>
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-primary" onclick="sendMessage()">SEND</button>
                        </span>
                    </div>
                </div>
            </div>


        </div>
    </div>
</div>
<input type="hidden" value="{{roomId}}" id="roomId">

<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.25.0/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.25.0/mode/javascript/javascript.min.js"></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>



<script src="/plugins/ot/ot.js"></script>
<script src="/socket.io/socket.io.js"></script>

<script src="https://cdn.jsdelivr.net/npm/peerjs@0.3.20/dist/peer.min.js"></script>
{{!-- <script src="http://cdn.peerjs.com/0.3/peer.js"></script> --}}

<script>
    try{
        var EditorClient = ot.EditorClient;
        var SocketIOAdapter = ot.SocketIOAdapter;
        var CodeMirrorAdapter = ot.CodeMirrorAdapter;
    } catch(err){
        console.log(err);
    }
    var socket = io.connect();
    var editor = CodeMirror.fromTextArea(document.getElementById("code-screen"),{
    lineNumbers: true,
    theme: "monokai"
    });  

    var code = $('#code-screen').val();
    var cmClient;
    function init(str , revision, clients, serverAdapter){
        if(!code){
            editor.setValue(str);
        }
        cmClient= window.cmClient= new EditorClient(
            revision, clients, serverAdapter, new CodeMirrorAdapter(editor)
        );
    };
    
    socket.on('doc',function(obj){
        console.log(JSON.stringify(obj));
        init(obj.str, obj.revision, obj.clients, new SocketIOAdapter(socket));
    });

    var username = $("#chatbox-username").val();
    if(username === ''){
        var userId = Math.floor(Math.random() * 9999).toString();
        username =  "User" +userId
        $("#chatbox-username").text(username);
    }

    var roomId = $('#roomId').val();
    socket.emit('joinRoom',{room: roomId, username: username});


    var userMessage = function(name, text) {
        return ('<li class= "media"> <div class="media-body>" <div class="media">'+ 
            '<div class="media-body"'+
            '<b>'+ name + '</b> : ' + text +
            '<hr/> </div></div></div></li>'
            );
    }


    var sendMessage = function(){
         var userMessage = $('#userMessage').val();
         socket.emit('chatMessage', { message : userMessage, username: username});
         $('userMessage').val("");
    };

    socket.on('chatMessage', function(data){
        $('#chatbox-listMessages').append(userMessage(data.username,data.message));
    });

//PEER LIBRARY CODE


    //Compatibility shim
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

    //peerJS object
    var peer = new Peer(username+roomId, {});
    console.log('peer object', peer);

    peer.on('open', function(id) {
        $('#my-id').text(peer.id)
    });

    //Receiving call

    peer.on('call', function(call) {
        // Answer the call, providing our mediaStream
        console.log("receive call");
        call.answer(window.localStream);
        step3(call);
    });

    peer.on('error', function(err){
        console.log("error occured", err);
        try{
            alert(err.message);
        }catch (error){
            console.log(error);
        }
        
        // Return to step 2 if error occurs
        step2();
    })

    //click handlers setup
    $(function(){
        $('#make-call').click(function(){
        // initiate a call
            console.log("make call function called with id",$('#callto-id').val());
            var call = peer.call($('#callto-id').val(), window.localStream);
            console.log('make call',call)
            step3(call);
        });

        $('#end-call').click(function(){
            window.existingCall.close();
            step2();
        });

        //Retry if getUserMedia fails
        

        //get things started
        step1();
    });

    function step1() {
        // get audio/ video steams
        navigator.getUserMedia({audio: true, video: true}, function(stream){
            //set your video display
            console.log(stream);
            const video = document.getElementById('my-video');
            video.srcObject = stream;
            //$('#my-video').prop('src',window.URL.createObjectURL(stream));

            window.localStream = stream;
            step2();
        }, function(){$('#step1-error').show();});
    }

    function step2 () {
        $('#step1, #step3').hide();
        $('#step2').show();
    }


    

    function step3 (call) {
        console.log("called step3", call);
        //hang up on an existing call if present
        if( window.existingCall){
            console.log("call already present")
            window.existingCall.close();
        }

        console.log("call present");
        //wait for stream on the call, then set peer video display
        call.on('stream', function(stream){
            console.log("stream call");
            console.log(stream);
            const video = document.getElementById('second-video');
            video.srcObject = stream;
            //$('#second-video').prop('src', URL.createObjectURL(stream));
        });

        //UI stuff
        window.existingCall = call;
        $('#second-id').text(call.peer);
        call.on('close',step2);
        console.log("close call")
        $('#step1, #step2').hide();
        $('#step3').show();
    }

</script>